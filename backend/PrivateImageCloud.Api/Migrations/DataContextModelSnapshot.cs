// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrivateImageCloud.Api.Common.Persistence;

#nullable disable

namespace PrivateImageCloud.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PrivateImageCloud.Entities.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CodeValidTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConfirmationCode")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("PrivateImageCloud.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OriginalImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Uploaded")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UploaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UploaderId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("PrivateImageCloud.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b510f65c-75ff-43f8-99ce-07d0a136613f"),
                            Created = new DateTime(2022, 10, 23, 15, 19, 57, 733, DateTimeKind.Unspecified).AddTicks(7866),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("7d1ce256-e17c-4274-966d-cee91a16029e"),
                            Created = new DateTime(2022, 10, 23, 15, 19, 57, 733, DateTimeKind.Unspecified).AddTicks(7866),
                            Name = "Registering"
                        },
                        new
                        {
                            Id = new Guid("0d33754c-b9db-496f-bf65-c0692c4b8100"),
                            Created = new DateTime(2022, 10, 23, 15, 19, 57, 733, DateTimeKind.Unspecified).AddTicks(7866),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("PrivateImageCloud.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Invited")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OriginalImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Registered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("WebpImageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OriginalImageId");

                    b.HasIndex("WebpImageId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd30a835-eb49-48be-bae3-ee9d94af07e2"),
                            Email = "glensorbo@gmail.com",
                            FirstName = "Glen",
                            Invited = new DateTime(2022, 10, 23, 15, 19, 57, 733, DateTimeKind.Unspecified).AddTicks(7866),
                            LastName = "Sørbø",
                            Registered = new DateTime(2022, 10, 23, 15, 19, 57, 733, DateTimeKind.Unspecified).AddTicks(7866),
                            Status = "Admin"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("PrivateImageCloud.Entities.Image", b =>
                {
                    b.HasOne("PrivateImageCloud.Entities.User", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("PrivateImageCloud.Entities.Role", b =>
                {
                    b.HasOne("PrivateImageCloud.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("PrivateImageCloud.Entities.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.Navigation("Creator");

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("PrivateImageCloud.Entities.User", b =>
                {
                    b.HasOne("PrivateImageCloud.Entities.Image", "OriginalProfileImage")
                        .WithMany()
                        .HasForeignKey("OriginalImageId");

                    b.HasOne("PrivateImageCloud.Entities.Image", "WebpProfileImage")
                        .WithMany()
                        .HasForeignKey("WebpImageId");

                    b.Navigation("OriginalProfileImage");

                    b.Navigation("WebpProfileImage");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("PrivateImageCloud.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateImageCloud.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
